{"version":3,"sources":["../server/server.js"],"names":["mongoose","connect","then","console","log","catch","err","User","model","user","Project","project","Component","component","Prop","prop","State","state","Callback","cb","app","dev","process","env","NODE_ENV","homePath","SECRET","addUserMiddleware","req","token","headers","message","referer","signUp","includes","jwt","verify","name","next","use","endpointURL","bodyParser","json","schema","context","_","res","server","listen","address","port","info"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACAA,mBACGC,OADH,CAEI,wEAFJ,EAIGC,IAJH,CAIQ;AAAA,SAAOC,QAAQC,GAAR,CAAY,uCAAZ,CAAP;AAAA,CAJR,EAKGC,KALH,CAKS;AAAA,SAAOF,QAAQC,GAAR,CAAY,kBAAZ,EAAgCE,GAAhC,CAAP;AAAA,CALT;;AAOA,IAAMC,OAAOP,mBAASQ,KAAT,CAAe,MAAf,EAAuBC,YAAvB,CAAb;AACA,IAAMC,UAAUV,mBAASQ,KAAT,CAAe,SAAf,EAA0BG,eAA1B,CAAhB;AACA,IAAMC,YAAYZ,mBAASQ,KAAT,CAAe,WAAf,EAA4BK,iBAA5B,CAAlB;AACA,IAAMC,OAAOd,mBAASQ,KAAT,CAAe,MAAf,EAAuBO,YAAvB,CAAb;AACA,IAAMC,QAAQhB,mBAASQ,KAAT,CAAe,OAAf,EAAwBS,aAAxB,CAAd;AACA,IAAMC,WAAWlB,mBAASQ,KAAT,CAAe,UAAf,EAA2BW,UAA3B,CAAjB;;AAEA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAArC;AACA,IAAMC,WAAW,WAAjB;;AAEA;AACA,IAAMC,SAAS,wBAAf;AACA,IAAMC;AAAA,qEAAoB,iBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClBC,iBADkB,GACVD,IAAIE,OAAJ,CAAY,SAAZ,CADU,EACc;;AACtC3B,oBAAQC,GAAR,CAAY,4BAAZ,EAA0CyB,KAA1C;AACME,mBAHkB,GAGRH,IAAIE,OAAJ,CAAYE,OAHJ;AAIlBC,kBAJkB,GAIT,OAAOF,OAAP,KAAmB,QAAnB,IAA+BA,QAAQG,QAAR,CAAiB,QAAjB,CAJtB;AAAA;AAAA;AAAA,mBAOCC,uBAAIC,MAAJ,CAAWP,KAAX,EAAkBH,MAAlB,CAPD;;AAAA;AAAA;AAOdjB,iBAPc,SAOdA,IAPc;;AAQtBN,oBAAQC,GAAR,CAAY,2BAAZ,EAAyCK,KAAzC;AACAmB,gBAAInB,IAAJ,GAAWA,KAAX;AATsB;AAAA;;AAAA;AAAA;AAAA;;AAWtB,gBAAIwB,MAAJ,EAAY;AACV9B,sBAAQC,GAAR,CAAY,QAAZ;AACD,aAFD,MAEO;AACLD,sBAAQC,GAAR,CAAY,UAAZ,EAAwB,YAAIiC,IAA5B;AACD;;AAfqB;AAiBxBT,gBAAIU,IAAJ;;AAjBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAoBAlB,IAAImB,GAAJ,CAAQZ,iBAAR;AACAP,IAAImB,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAnB,IAAImB,GAAJ,CAAQ,oBAAK,GAAL,CAAR;;AAEAnB,IAAImB,GAAJ,CACEd,QADF,EAEE,0CAAgB;AACde,eAAa;AADC,CAAhB,CAFF;;AAOApB,IAAImB,GAAJ,CACE,UADF,EAEEE,qBAAWC,IAAX,EAFF,EAGE,yCAAe,eAAO;AACpB,SAAO;AACLC,4BADK;AAELC,aAAS;AACPrC,gBADO;AAEPG,sBAFO;AAGPE,0BAHO;AAIPE,gBAJO;AAKPE,kBALO;AAMPE,wBANO;AAOPQ,oBAPO;AAQPjB,YAAMmB,IAAInB;AARH;AAFJ,GAAP;AAaD,CAdD,CAHF;;AAoBAW,IAAImB,GAAJ,CAAQ,GAAR,EAAa,UAACM,CAAD,EAAIC,GAAJ,EAAY;AACvBA,MAAIJ,IAAJ,CAAS,qDAAT;AACD,CAFD;;AAIA,IAAMK,SAAS3B,IAAI4B,MAAJ,CAAW,IAAX,EAAiB,YAAM;AAAA,wBACnBD,OAAOE,OAAP,EADmB;AAAA,MAC5BC,IAD4B,mBAC5BA,IAD4B;;AAEpC/C,UAAQgD,IAAR,yCAAmDD,IAAnD;AACD,CAHc,CAAf","file":"server.js","sourcesContent":["import express from \"express\";\nimport { graphqlExpress, graphiqlExpress } from \"apollo-server-express\";\nimport morgan from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport mongoose from \"mongoose\";\nimport cors from \"cors\";\nimport jwt from \"jsonwebtoken\";\nimport schema from \"./graphql/schema\";\nimport { user, project, component, prop, state, cb } from \"./models/models\";\n\n// mongoose.connect(\"mongodb://localhost/react-diagrammer\");\nmongoose\n  .connect(\n    \"mongodb://hernquist:Obama2020@ds115664.mlab.com:15664/react-diagrammer\"\n  )\n  .then(res => console.log(\"mongoose.connection... mlab connected\"))\n  .catch(err => console.log(\"mongoose.connect\", err));\n\nconst User = mongoose.model(\"User\", user);\nconst Project = mongoose.model(\"Project\", project);\nconst Component = mongoose.model(\"Component\", component);\nconst Prop = mongoose.model(\"Prop\", prop);\nconst State = mongoose.model(\"State\", state);\nconst Callback = mongoose.model(\"Callback\", cb);\n\nconst app = express();\nconst dev = process.env.NODE_ENV === \"development\";\nconst homePath = \"/graphiql\";\n\n// auth middleware\nconst SECRET = \"qwertyuiopsdflkjsdlfkj\";\nconst addUserMiddleware = async req => {\n  const token = req.headers[\"x-token\"]; // || req.headers.authorization;\n  console.log(\"[addUserMiddleware] token:\", token);\n  const message = req.headers.referer;\n  const signUp = typeof message === \"string\" && message.includes(\"signUp\");\n\n  try {\n    const { user } = await jwt.verify(token, SECRET);\n    console.log(\"[addUserMiddleware] user:\", user);\n    req.user = user;\n  } catch (err) {\n    if (signUp) {\n      console.log(\"SignUp\");\n    } else {\n      console.log(\"Error-1:\", err.name);\n    }\n  }\n  req.next();\n};\n\napp.use(addUserMiddleware);\napp.use(morgan(\"dev\"));\napp.use(cors(\"*\"));\n\napp.use(\n  homePath,\n  graphiqlExpress({\n    endpointURL: \"/graphql\"\n  })\n);\n\napp.use(\n  \"/graphql\",\n  bodyParser.json(),\n  graphqlExpress(req => {\n    return {\n      schema,\n      context: {\n        User,\n        Project,\n        Component,\n        Prop,\n        State,\n        Callback,\n        SECRET,\n        user: req.user\n      }\n    };\n  })\n);\n\napp.use(\"/\", (_, res) => {\n  res.json(\"Go to /graphiql to test your queries and mutations!\");\n});\n\nconst server = app.listen(3001, () => {\n  const { port } = server.address();\n  console.info(`Express listen at http://localhost:${port}`);\n});\n"]}